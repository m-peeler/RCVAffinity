package affinity_analysis;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;

import affinity.Matrices;
import affinity.MatrixParty;

public class MatricesAnalysis {
	
	private Matrices _mtrx;
	
	public MatricesAnalysis(Matrices mtrx) {
		_mtrx = mtrx;
	}
	
	/**
	 * Calculates and saves to the provided file six matrices based on the second-preference
	 * matrix in the MatricesAnalysis' Matrices instance.
	 * 
	 * This requires that the Matrices have true values for snd, cld, and cldFst when instantiated;
	 * if the matrices which correspond to those booleans are not generated by the Matrices instance,
	 * then the function will return false and the additional matrices will not be calculated.
	 * 
	 * The six calculated matrices are:
	 *  - Ranked second percentage of the primary vote 
	 *    
	 *    Takes Matrices.getRankedSecond() and divides each cell by the total number of ballots that voted
	 *    for the cell's primary choice. 
	 *    
	 *    For the matrix
	 *    		Lib		Lab
	 *    Lib	16		4
	 *    Lab	9		21
	 *    
	 *    This would be equivalent to dividing cell(i,j) by the sum of all cells in row(i)
	 *    
	 *    Values in the new matrix will be decimal numbers between 0 and 1, and include 4 places. This 
	 *    number contained in each cell is now the fraction of primary choice ballots that selected a
	 *    specific secondary choice. For this matrix, the main diagonal contains the percentage of ballots
	 *    that did not have a second choice included on their ballot.
	 *    Ex. - 
	 *    		Lib		Lab
	 *    Lib	.8		.2
	 *    Lab	.3		.7
	 *    
	 *    In this matrix, 80% of ballots which voted for Liberal first had no second preference,
	 *    and 20% had the second preference of Labor; similarly, 70% of ballots with Labor as their
	 *    primary choice indicated no secondary choice, and 30% picked Liberal as their second choice. 
	 *    
	 *  - Ranked second percentage of the secondary vote
	 *    
	 *    Takes Matrices.getRankedSecond() and divides each cell by the total number of second choice 
	 * 
	 * @param pout
	 * @return
	 */
	public boolean secondaryVotePercentages(PrintWriter pout) {
		
		if (_mtrx.getCouldRankFirst() == null || _mtrx.getCouldRankSecond() == null || _mtrx.getRankedSecond() == null) {
			return false;
		}
		
		ArrayList<Integer> totalHori = _mtrx.totalPrimaryVotesByOption();
		ArrayList<Integer> totalVert = _mtrx.totalSecondaryVotesByOption();
		
		double[][] horiMtrx = new double[totalHori.size()][totalVert.size()];
		double[][] vertMtrx = new double[totalHori.size()][totalVert.size()];
		double[][] absMtrx = new double[totalHori.size()][totalVert.size()];
		double[][] secPosibMtrx = new double[totalHori.size()][totalVert.size()];
		double[][] primPosibMtrx = new double[totalHori.size()][totalVert.size()];

		for (int i = 0; i < _mtrx.getPrimSize(); i++) {
			
			MatrixParty cur = _mtrx.getRankedSecond().get(i);

			for (int j = 0; j < _mtrx.getSecSize(); j++) {
				double secPref = cur.getSecondPref(_mtrx.getSecondaryOrder().get(j));

				horiMtrx[i][j] = secPref / (double) totalHori.get(i);
				vertMtrx[i][j] = secPref / (double) totalVert.get(j);
				absMtrx[i][j] = secPref / (double) _mtrx.totalVotesCast();
				secPosibMtrx[i][j] = secPref / (double) _mtrx.getCouldRankSecond()[i][j];
				primPosibMtrx[i][j] = secPref / (double) _mtrx.getCouldRankFirst()[i][j];
			}
			
			horiMtrx[i][_mtrx.getSecSize()] = (double) cur.getSpareSlot() / (double) totalHori.get(i);
			vertMtrx[i][_mtrx.getSecSize()] = (double) cur.getSpareSlot() / (double) totalVert.get(_mtrx.getSecSize());
			absMtrx[i][_mtrx.getSecSize()] = (double) cur.getSpareSlot() / (double) _mtrx.totalVotesCast();
			secPosibMtrx[i][_mtrx.getSecSize()] = (double) cur.getSpareSlot() / (double) _mtrx.getCouldRankSecond()[i][i];
			primPosibMtrx[i][_mtrx.getSecSize()] = (double) cur.getSpareSlot() / (double) _mtrx.getCouldRankFirst()[i][i];

			
		}
		
		double[] 	percentageOfBallotsIncluded = new double[horiMtrx[0].length];
		double[][] disproportionality = new double[horiMtrx.length][horiMtrx[0].length];
		
		for (int i = 0; i < secPosibMtrx.length; i++) {
			for (int j = 0; j < secPosibMtrx[i].length; j++) {
				percentageOfBallotsIncluded[j] += Double.isFinite(secPosibMtrx[i][j]) ? secPosibMtrx[i][j] : 0;
			}
		}
		
		for (int i = 0; i < horiMtrx.length; i++) {
			for (int j = 0; j < horiMtrx[i].length; j++) {
				disproportionality[i][j] = horiMtrx[i][j] / percentageOfBallotsIncluded[j];
			}
		}
		
		@SuppressWarnings("unchecked")
		ArrayList<String> sec = (ArrayList<String>) _mtrx.getSecondaryOrder().clone();
		sec.add("No Preference");
		
		pout.println(arrayToString(horiMtrx, _mtrx.getPrimaryOrder(), sec, "Ranked second percentage of the primary vote"));
		pout.println(arrayToString(vertMtrx, _mtrx.getPrimaryOrder(), sec, "Ranked second percentage of the secondary vote"));
		pout.println(arrayToString(absMtrx, _mtrx.getPrimaryOrder(), sec, "Ranked second percentage of the total vote"));
		pout.println(arrayToString(secPosibMtrx, _mtrx.getPrimaryOrder(), sec, "Ranked second percentage of the possible ranked second vote"));
		pout.println(arrayToString(absMtrx, _mtrx.getPrimaryOrder(), sec, "Ranked second percentage of the possible ranked first vote"));
		pout.println(arrayToString(disproportionality, _mtrx.getPrimaryOrder(), sec, "Ranked second disproportionality of vote types"));
				
		return true;
		
	}
	
	public StringBuilder arrayToString(double[][] matrix, ArrayList<String> primaryTitles, ArrayList<String> secondaryTitles, String matrixTitle) {
		StringBuilder rtrn = new StringBuilder(matrixTitle + "\n\n,");
		
		for (String ttl : secondaryTitles) rtrn.append(ttl + ",");
		rtrn.append("\n");
		
		for (int i = 0; i < matrix.length; i++) {
			rtrn.append((primaryTitles.size() > i ? primaryTitles.get(i) : "") + ",");
			for (int j = 0; j < matrix[i].length; j++) {
				double val = Double.isFinite(matrix[i][j]) ? matrix[i][j] : 0;
				rtrn.append(String.format("%1.4f", val) + ",");
			}
			rtrn.append("\n");
		}
		
		return rtrn.append("\n");
	}
		
	public boolean anyVotePercentages(PrintWriter pout) {
		
		if (_mtrx.getRankedSecond() == null || _mtrx.getCompeted() == null || _mtrx.getRankedAny() == null) {
			return false;
		}
		
		ArrayList<Integer> totalHori = _mtrx.totalPrimaryVotesByOption();
		ArrayList<Integer> totalVert = _mtrx.totalSecondaryVotesByOption();
		
		double[][] horiMtrx 	= new double[totalHori.size()][totalVert.size()];
		double[][] vertMtrx 	= new double[totalHori.size()][totalVert.size()];
		double[][] absMtrx 		= new double[totalHori.size()][totalVert.size()];
		double[][] posibMtrx 	= new double[totalHori.size()][totalVert.size()];
		
		double total = 0; 
		for (int i : totalHori) total += i;
		
		for (int i = 0; i < _mtrx.getPrimSize(); i++) {

			MatrixParty cur = _mtrx.getRankedAny().get(i);
			for (int j = 0; j < _mtrx.getSecSize(); j++) {
				double secPref = cur.getSecondPref(_mtrx.getSecondaryOrder().get(j));
				
				horiMtrx[i][j] 	= secPref / (double) totalHori.get(i);
				vertMtrx[i][j] 	= secPref / (double) totalVert.get(j);
				absMtrx[i][j] 	= secPref / total;
				posibMtrx[i][j] = secPref / (double) _mtrx.getCompeted()[i][j];
			}
			
			horiMtrx[i][_mtrx.getSecSize()] 	= (double) cur.getSpareSlot() / (double) totalHori.get(i);
			vertMtrx[i][_mtrx.getSecSize()] 	= (double) cur.getSpareSlot() / (double) totalVert.get(_mtrx.getSecSize());
			absMtrx[i][_mtrx.getSecSize()]		= (double) cur.getSpareSlot() / (double) _mtrx.totalVotesCast();
			posibMtrx[i][_mtrx.getSecSize()] 	= (double) cur.getSpareSlot() / (double) _mtrx.getCompeted()[i][i];
			
		}
		
		double[] 	percentageOfBallotsIncluded = new double[horiMtrx[0].length];
		double[][] disproportionality = new double[horiMtrx.length][horiMtrx[0].length];
		
		for (int i = 0; i < posibMtrx.length; i++) {
			for (int j = 0; j < posibMtrx[i].length; j++) {
				percentageOfBallotsIncluded[j] += Double.isFinite(posibMtrx[i][j]) ? posibMtrx[i][j] : 0;
			}
		}
		
		for (int i = 0; i < horiMtrx.length; i++) {
			for (int j = 0; j < horiMtrx[i].length; j++) {
				disproportionality[i][j] = horiMtrx[i][j] / percentageOfBallotsIncluded[j];
			}
		}
		
		double[][] avgNumberOfPreferences = new double[1][horiMtrx.length];
		
		for (int i = 0; i < horiMtrx.length; i++) {
			for (int j = 0; j < horiMtrx.length; j++) {
				avgNumberOfPreferences[0][i] += horiMtrx[i][j];
			}
		}
		
		@SuppressWarnings("unchecked")
		ArrayList<String> sec = (ArrayList<String>) _mtrx.getSecondaryOrder().clone();
		sec.add("No Preference");
		
		ArrayList<String> s = new ArrayList<String>();
		s.add("Average Number of preferences provided");
		
		pout.println(arrayToString(horiMtrx, _mtrx.getPrimaryOrder(), sec, "Ranked anywhere percentage of the primary vote"));
		pout.println(arrayToString(vertMtrx, _mtrx.getPrimaryOrder(), sec, "Ranked anywhere percentage of the secondary vote"));
		pout.println(arrayToString(absMtrx, _mtrx.getPrimaryOrder(), sec, "Ranked anywhere percentage of the total vote"));
		pout.println(arrayToString(posibMtrx, _mtrx.getPrimaryOrder(), sec, "Ranked anywhere percentage of competed vote"));
		pout.println(arrayToString(disproportionality, _mtrx.getPrimaryOrder(), sec, "Ranked anywhere disproportionality of vote types"));
		pout.println(arrayToString(avgNumberOfPreferences, s, sec, "Average Number of preferences given"));
		
		return true;
		
	}
	
	public void firstVsSecondPercent(PrintWriter pout) {
		
		StringBuilder outputLineOne = new StringBuilder(",");
		StringBuilder oloNames		= new StringBuilder("Percent of Primary Vote,");
		StringBuilder outputLineTwo = new StringBuilder(",");
		StringBuilder oltNames 		= new StringBuilder("Percent of Secondary Vote,");
		StringBuilder difference 	= new StringBuilder("Difference,");
		
		boolean[] usedFst = new boolean[_mtrx.getPrimSize()];
		boolean[] usedSnd = new boolean[_mtrx.getSecSize()];
		
		ArrayList<Integer> horiSums = _mtrx.totalPrimaryVotesByOption();
		ArrayList<Integer> vertSums = _mtrx.totalSecondaryVotesByOption();

		double total = _mtrx.totalVotesCast();
		
		for (int i = 0; i < _mtrx.getPrimSize(); i++) {
			for (int j = 0; j < _mtrx.getSecSize(); j++) {
				
				String partyPrim = _mtrx.getPrimaryOrder().get(i);
				String partySec = _mtrx.getSecondaryOrder().get(j);
				usedFst[i] = true;
				usedSnd[j] = true;
				
				if (partyPrim.equals(partySec)) {
					
					double hori = (double) horiSums.get(i) / total;
					double vert = (double) vertSums.get(j) / total;
					double diff = hori - vert;

					oloNames.append(partyPrim + ",");
					outputLineOne.append(String.format("%1.4f", hori) + ",");
				
					oltNames.append(partySec + ",");
					outputLineTwo.append(String.format("%1.4f", vert) + ",");
					
					difference.append(String.format("%1.4f", diff) + ",");
				}
			}
		}
		
		oloNames.append(",");
		outputLineOne.append(",");
		oltNames.append(",");
		outputLineTwo.append(",");
		
		for (int i = 0; i < _mtrx.getPrimSize(); i++) {
			if (!usedFst[i]) {
				oloNames.append(_mtrx.getPrimaryOrder().get(i) + ",");
				double val = (double) _mtrx.totalPrimaryVotesByOption().get(i) / (double) _mtrx.totalVotesCast();
				outputLineOne.append(String.format("%1.4f", val) + ",");
			}
		}
		
		for (int j = 0; j < _mtrx.getPrimSize(); j++) {
			if (!usedSnd[j]) {
				oloNames.append(_mtrx.getSecondaryOrder().get(j) + ",");
				double val = (double) _mtrx.totalSecondaryVotesByOption().get(j) / (double) _mtrx.totalVotesCast();
				outputLineOne.append(String.format("%1.4f", val) + ",");
			}
		}
		
		outputLineOne.append("\n");
		oloNames.append("\n");
		outputLineTwo.append("\n");
		oltNames.append("\n");
		difference.append("\n");
		
		pout.println(oloNames.toString() + outputLineOne.toString() + oltNames.toString()
					+ outputLineTwo.toString() + difference.toString());
		
	}
	
	public void allAnalyses(String filename) {
		File f = new File(filename);
		
		if (!f.exists()) {
			try {
				f.getParentFile().mkdirs();
				f.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
				return;
			}
		}
		
		PrintWriter pout;
		try {
			pout = new PrintWriter(new FileWriter(f));
		} catch (IOException e) {
			e.printStackTrace();
			return;
		}
		
		firstVsSecondPercent(pout);
		secondaryVotePercentages(pout);
		anyVotePercentages(pout);		
		
		pout.close();
	}
	
}
